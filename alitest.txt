1 问答题 
题目描述
砸金蛋是一个常见娱乐项目，砸开金蛋后可以拿走里面对应的奖品，但今天这个金蛋比较特殊，首先这是付费砸金蛋，且每一个金蛋的价格还不一样。现在奖台上放置了 n个金蛋，排成一排，每个金蛋上面都标注了砸开的费用，且这 n 个金蛋中，只有一个大奖。为了提高游戏的刺激，每次砸完金蛋，主办方都要告知，大奖在刚刚被砸的这个金蛋的左边或右边。如果你砸出大奖，不但可以领走大奖，而且本次砸蛋的费用可以不计。现在的问题是：如果要确保砸出大奖，最小要准备多少的费用？
?
输入描述
输入数据包含两行
第一行有一个数字n， 表示有 n个金蛋
第二行有 n个数字，每个数字的大小表示砸开这个金蛋要付出的费用
输出描述
表示确保砸出大奖的最小费用
输入样例
3
3 4 5
输出样例
4

编译器版本: gcc 4.8.4
请使用标准输入输出(stdin，stdout) ；请把所有程序写在一个文件里，勿使用已禁用图形、文件、网络、系统相关的头文件和操作，如sys/stat.h , unistd.h , curl/curl.h , process.h
时间限制: 3S (C/C++以外的语言为: 5 S) ??内存限制: 128M (C/C++以外的语言为: 640 M)
输入: 
2 5 6
输出: 
5
输入范例: 
3
3 5 4
输出范例: 
4

#include <iostream>
#include <vector>
#include <numeric>
#include <limits>

using namespace std;

/** 请完成下面这个函数，实现题目要求的功能 **/
 /** 当然，你也可以不按照这个模板来作答，完全按照自己的想法来 ^-^  **/

int dung(vector<int> eggs, int low, int high)
{
	if (high - low == 0)
		return 0;
	else if (high - low == 1)
	{
		int index = (eggs[low] < eggs[high]) ? low : high;
		//printf("--> %d ",index+1);
		return min(eggs[low], eggs[high]);
	}

	else
	{
		int index = low;
		int minimalCost = eggs[low] + dung(eggs, low + 1, high);
		if (eggs[low] + dung(eggs, low + 1, high) > eggs[high] + dung(eggs, low, high - 1))
		{
			index = high;
			minimalCost = eggs[high] + dung(eggs, low, high - 1);
		}
		//int minimalCost = min(eggs[low]+dung(eggs, low + 1, high), eggs[high]+dung(eggs, low, high - 1));
		for (int i = 1; i <= high - low - 1; i++)
		{
			int cost = eggs[low + i] + max(dung(eggs, low, low + i - 1), dung(eggs, low + i + 1, high));
			if (cost < minimalCost)
			{
				index = low + i;
				minimalCost = cost;
			}
		}
		//printf("--> %d ",index+1);
		return minimalCost;
	}
}

int dung(vector < int > eggs)
{
	int low = 0;
	int high = eggs.size() - 1;
	return dung(eggs, low, high);
}

int main() {
    int res;

    int _eggs_size = 0;
    cin >> _eggs_size;
    vector<int> _eggs(_eggs_size);
    int _eggs_item;
    for(int _eggs_i=0; _eggs_i<_eggs_size; _eggs_i++) {
        cin >> _eggs_item;
        _eggs[_eggs_i] = _eggs_item;
    }


    
    res = dung(_eggs);
    cout << res << endl;
    
    return 0;

}